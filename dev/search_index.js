var documenterSearchIndex = {"docs":
[{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/updating_the_HGF.jl\"","category":"page"},{"location":"generated_markdowns/updating_the_HGF/#Updating-the-HGF","page":"Updating the HGF","title":"Updating the HGF","text":"","category":"section"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"In this section we will describe the HGF update process. We update all nodes in an HGF based on an input. This input can either be missing, a single value, a vector of values, or a dictionary of input node names and corresponding values.","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"The update_hgf!() function call takes an hgf and the input as inputs. All HGF's follow the same update order described in this section. The update process is the following:","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"We start by updating the predictions from the last timestep of all nodes. First the state nodes, then the input nodes.","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"We give the first input to the input node. Then in the input node we calculate the value prediction error (prediction from last timestep vs. new input).","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"(Early update state nodes) We update the input node's value parents posteriors, value prediction error and volatility prediction error","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"We update the input node's volatility prediction errors","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"(Late update state nodes) We update the remaining state nodes. We update their posterior, value prediction error and volatility prediciton error.","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"The update_hgf!() function does not return anything but updates the HGF.","category":"page"},{"location":"generated_markdowns/updating_the_HGF/#Example-of-updating-the-HGF","page":"Updating the HGF","title":"Example of updating the HGF","text":"","category":"section"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"We deinfe a premade HGF:","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"using HierarchicalGaussianFiltering\n\nhgf = premade_hgf(\"help\")\n\nhgf = premade_hgf(\"binary_3level\");\n\nupdate_hgf!(hgf, [1, 0, 1]);\nnothing #hide","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"As you can see, the states are updated but only with the last trial saved.","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"get_states(hgf)","category":"page"},{"location":"generated_markdowns/updating_the_HGF/#Overview-of-HGF-update-functions","page":"Updating the HGF","title":"Overview of HGF update functions","text":"","category":"section"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"Modules = [HierarchicalGaussianFiltering]\nPages = [\"update_hgf/update_equations.jl\",\"update_hgf/update_hgf.jl\",\"update_hgf/update_node.jl\"]","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"","category":"page"},{"location":"generated_markdowns/updating_the_HGF/","page":"Updating the HGF","title":"Updating the HGF","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/all_functions/","page":"All Functions","title":"All Functions","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/all_functions.jl\"","category":"page"},{"location":"generated_markdowns/all_functions/#Overview-of-all-functions-in-the-Hierarchical-Gaussian-Filtering-package","page":"All Functions","title":"Overview of all functions in the Hierarchical Gaussian Filtering package","text":"","category":"section"},{"location":"generated_markdowns/all_functions/","page":"All Functions","title":"All Functions","text":"Modules = [HierarchicalGaussianFiltering]","category":"page"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryInputNode","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryInputNode","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryInputNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryInputNodeHistory","text":"Configuration of history of binary input node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryInputNodeParameters","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryInputNodeParameters","text":"Configuration of parameters in binary input node. Default category mean set to [0,1]\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryInputNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryInputNodeState","text":"Configuration of states of binary input node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryStateNode","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryStateNode","text":"Overview of edge posibilities \n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryStateNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryStateNodeHistory","text":"Overview of the history of the binary state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryStateNodeParameters","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryStateNodeParameters","text":"Configure parameters of binary state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.BinaryStateNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.BinaryStateNodeState","text":"Overview of the states of the binary state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalInputNode","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalInputNode","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalInputNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalInputNodeHistory","text":"History of categorical input node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalInputNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalInputNodeState","text":"Configuration of states of categorical input node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalStateNode","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalStateNode","text":"Configuration of edges in categorical state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalStateNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalStateNodeHistory","text":"Configuration of history in categorical state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.CategoricalStateNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.CategoricalStateNodeState","text":"Configuration of states in categorical state node\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousInputNode","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousInputNode","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousInputNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousInputNodeHistory","text":"Configuration of continuous input node history\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousInputNodeParameters","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousInputNodeParameters","text":"Configuration of continuous input node parameters\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousInputNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousInputNodeState","text":"Configuration of continuous input node states\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousStateNode","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousStateNode","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousStateNodeHistory","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousStateNodeHistory","text":"Configuration of continuous state node history\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousStateNodeParameters","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousStateNodeParameters","text":"Configuration of continuous state nodes' parameters\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.ContinuousStateNodeState","page":"All Functions","title":"HierarchicalGaussianFiltering.ContinuousStateNodeState","text":"Configurations of the continuous state node states\n\n\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.HGF","page":"All Functions","title":"HierarchicalGaussianFiltering.HGF","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.OrderedNodes","page":"All Functions","title":"HierarchicalGaussianFiltering.OrderedNodes","text":"\n\n\n\n","category":"type"},{"location":"generated_markdowns/all_functions/#ActionModels.get_history-Tuple{}","page":"All Functions","title":"ActionModels.get_history","text":"get_history(hgf::HGF, target_state::Tuple{String,String})\n\nGets the history of a state from a specific node in an HGF. A vector of states can also be passed.\n\nget_history(hgf::HGF, node_name::String)\n\nGets the history of all states for a specific node in an HGF. If only a node object is passed, it will return the history of all states in that node. If only an HGF object is passed, it will return the history of all states in all nodes in the HGF.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.get_parameters-Tuple{}","page":"All Functions","title":"ActionModels.get_parameters","text":"get_parameters(hgf::HGF, target_param::Tuple{String,String})\n\nGets a single parameter value from a specific node in an HGF. A vector of parameters can also be passed.\n\nget_parameters(hgf::HGF, node_name::String)\n\nGets all parameter values for a specific node in an HGF. If only a node object is passed, returns all parameters in that node. If only an HGF object is passed, returns all parameters of all nodes in the HGF.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.get_states-Tuple{}","page":"All Functions","title":"ActionModels.get_states","text":"get_states(hgf::HGF, target_state::Tuple{String,String})\n\nGets a single state value from a specific node in an HGF. A vector of states can also be passed.\n\nget_states(hgf::HGF, node_name::String)\n\nGets all parameter values for a specific node in an HGF. If only a node object is passed, returns all states in that node. If only an HGF object is passed, returns all states of all nodes in the HGF.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.give_inputs!-Tuple{}","page":"All Functions","title":"ActionModels.give_inputs!","text":"give_inputs!(hgf::HGF, inputs)\n\nGive inputs to an agent. Input can be a single value, a vector of values, or an array of values.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.plot_predictive_simulation-Tuple{HierarchicalGaussianFiltering.HGF, Any, Union{String, Tuple}, Vector}","page":"All Functions","title":"ActionModels.plot_predictive_simulation","text":"plot_predictive_simulation(hgf::HGF, parameter_distributions, target_state, inputs; kwargs...)\n\nRuns and plots results from a predictive simulation using only an HGF, instead of an agent. See the ActionModels documentation for more information. \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.plot_trajectory-Tuple{HierarchicalGaussianFiltering.HGF, String}","page":"All Functions","title":"ActionModels.plot_trajectory","text":"plot_trajectory(hgf::HGF, node_name::String; kwargs...)\n\nPlots the trajectory of a node in an HGF. See the ActionModels documentation for more information.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.premade_agent","page":"All Functions","title":"ActionModels.premade_agent","text":"premade_agent(model_name::String, hgf::HGF, config::Dict = Dict(); verbose = true)\n\nCreate an agent fom the list of premade agents. If an HGF is passed as a separate argument, add it to the config dictionary.\n\n\n\n\n\n","category":"function"},{"location":"generated_markdowns/all_functions/#ActionModels.reset!-Tuple{HierarchicalGaussianFiltering.HGF}","page":"All Functions","title":"ActionModels.reset!","text":"reset!(hgf::HGF)\n\nReset an HGF to its initial state.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#ActionModels.set_parameters!-Tuple{}","page":"All Functions","title":"ActionModels.set_parameters!","text":"set_parameters!(hgf::HGF, target_param::Tuple, param_value::Any)\n\nSetting a single parameter value for an HGF. \n\nset_parameters!(hgf::HGF, parameter_values::Dict)\n\nSet mutliple parameters values for an HGF. Takes a dictionary of parameter names and values.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_auxiliary_prediction_precision-Tuple{HierarchicalGaussianFiltering.AbstractInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_auxiliary_prediction_precision","text":"calculate_auxiliary_prediction_precision(node::AbstractInputNode)\n\nAn input node's auxiliary prediction precision is always 1.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_auxiliary_prediction_precision-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_auxiliary_prediction_precision","text":"calculate_auxiliary_prediction_precision(node::AbstractNode)\n\nCalculates a node's auxiliary prediction precision.\n\nUses the equation gamma_i = nu_i cdot hatpi_i\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior","text":"calculate_posterior(node::CategoricalStateNode)\n\nCalculate the posterior for a categorical state node.\n\nOne hot encoding vecu = 0 0 dots 1 dots0\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_mean-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_mean","text":"calculate_posterior_mean(node::AbstractNode)\n\nCalculates a node's posterior mean.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_mean-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_mean","text":"calculate_posterior_mean(node::BinaryStateNode)\n\nCalculates a node's posterior mean.\n\nUses the equation mu = frace^-05 cdot pi_n cdot eta_1^2hatmu_n cdot e^-05 cdot pi_n cdot eta_1^2  + 1-hatmu_n cdot e^-05 cdot pi_n cdot eta_2^2\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_mean_value_child_increment-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_mean_value_child_increment","text":"calculate_posterior_mean_value_child_increment(node::AbstractNode, child::AbstractNode)\n\nCalculates the posterior mean update term for a single continuous value child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_mean_value_child_increment-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_mean_value_child_increment","text":"calculate_posterior_mean_value_child_increment(node::AbstractNode, child::BinaryStateNode)\n\nCalculates the posterior mean update term for a single binary value child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_mean_volatility_child_increment-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_mean_volatility_child_increment","text":"calculate_posterior_mean_volatility_child_increment(node::AbstractNode, child::AbstractNode)\n\nCalculates the posterior mean update term for a single continuos volatility child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_precision-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_precision","text":"calculate_posterior_precision(node::AbstractNode)\n\nCalculates a node's posterior precision.\n\nUses the equation pi_i^ = hatpi_i +underbracesum_j=1^jchildren alpha_ji cdot hatpi_j _textsum of VAPE  continuous  value chidren\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_precision-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_precision","text":"calculate_posterior_precision(node::BinaryStateNode)\n\nCalculates a binary node's posterior precision.\n\nUses the equations\n\npi_n = inf if the precision is infinite \n\npi_n = frac1hatmu_n cdot (1-hatmu_n)  if the precision is other than infinite\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_precision_vape-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_precision_vape","text":"calculate_posterior_precision_vape(node::AbstractNode, child::AbstractNode)\n\nCalculates the posterior precision update term for a single continuous value child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_precision_vape-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_precision_vape","text":"calculate_posterior_precision_vape(node::AbstractNode, child::BinaryStateNode)\n\nCalculates the posterior precision update term for a single binary value child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_posterior_precision_vope-Tuple{HierarchicalGaussianFiltering.AbstractNode, HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_posterior_precision_vope","text":"calculate_posterior_precision_vope(node::AbstractNode, child::AbstractNode)\n\nCalculates the posterior precision update term for a single continuous volatility child to a state node.\n\nUses the equation \n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction","text":"function calculate_prediction(node::CategoricalStateNode)\n\nCalculate the prediction for a categorical state node.\n\nUses the equation vechatmu_n= frachatmu_jsum_j=1^jbinary parents hatmu_j\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_mean-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_mean","text":"calculate_prediction_mean(node::AbstractNode)\n\nCalculates a node's prediction mean.\n\nUses the equation hatmu_i=mu_i+sum_j=1^jvalueparents mu_j cdot alpha_ij\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_mean-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_mean","text":"calculate_prediction_mean(node::BinaryStateNode)\n\nCalculates a binary state node's prediction mean.\n\nUses the equation hatmu_n= big(1+e^sum_j=1^jvalue  parents hatmu_jbig)^-1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_precision-Tuple{HierarchicalGaussianFiltering.AbstractInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_precision","text":"calculate_prediction_precision(node::AbstractInputNode)\n\nCalculates an input node's prediction precision.\n\nUses the equation hatpi_n = frac1nu_n\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_precision-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_precision","text":"calculate_prediction_precision(node::AbstractNode)\n\nCalculates a node's prediction precision.\n\nUses the equation hatpi_i^ = frac1frac1pi_i+nu_i^\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_precision-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_precision","text":"calculate_prediction_precision(node::BinaryStateNode)\n\nCalculates a binary state node's prediction precision.\n\nUses the equation hatpi_n = frac1hatmu_n cdot (1-hatmu_n)\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_prediction_volatility-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_prediction_volatility","text":"calculate_prediction_volatility(node::AbstractNode)\n\nCalculates a node's prediction volatility.\n\nUses the equation nu_i =exp( omega_i + sum_j=1^jvolatilityparents mu_j cdot kappa_ij\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_value_prediction_error-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_value_prediction_error","text":"calculate_value_prediction_error(node::AbstractNode)\n\nCalculate's a state node's value prediction error.\n\nUses the equation delta_n = mu_n - hatmu_n\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_value_prediction_error-Tuple{HierarchicalGaussianFiltering.BinaryInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_value_prediction_error","text":"calculate_value_prediction_error(node::BinaryInputNode)\n\nCalculates the prediciton error of a binary input node with finite precision.\n\nUses the equation delta_n= u - sum_j=1^jvalueparents hatmu_j\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_value_prediction_error-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_value_prediction_error","text":"calculate_value_prediction_error(node::CategoricalStateNode)\n\nCalculate the value prediction error for a categorical state node.\n\nUses the equation delta_n= u - sum_j=1^jvalueparents hatmu_j\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_value_prediction_error-Tuple{HierarchicalGaussianFiltering.ContinuousInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_value_prediction_error","text":"calculate_value_prediction_error(node::ContinuousInputNode)\n\nCalculate's an input node's value prediction error.\n\nUses the equation delta_n= u - sum_j=1^jvalueparents hatmu_j\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_volatility_prediction_error-Tuple{HierarchicalGaussianFiltering.AbstractNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_volatility_prediction_error","text":"calculate_volatility_prediction_error(node::AbstractNode)\n\nCalculates a state node's volatility prediction error.\n\nUses the equation Delta_n = frachatpi_npi_n + hatpi_n cdot delta_n^2-1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.calculate_volatility_prediction_error-Tuple{HierarchicalGaussianFiltering.ContinuousInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.calculate_volatility_prediction_error","text":"calculate_volatility_prediction_error(node::ContinuousInputNode)\n\nCalculates an input node's volatility prediction error.\n\nUses the equation mu_j=sum_j=1^jvalueparents mu_j pi_j=fracsum_j=1^jvalueparents pi_jj Delta_n=frachatpi_npi_j + hatmu_icdot (u -mu_j^2 )-1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.check_hgf-Tuple{HierarchicalGaussianFiltering.HGF}","page":"All Functions","title":"HierarchicalGaussianFiltering.check_hgf","text":"check_hgf(hgf::HGF)\n\nCheck whether an HGF has specified correctly. A single node can also be passed.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.enter_node_inputs!-Tuple{HierarchicalGaussianFiltering.HGF, Union{Missing, Real}}","page":"All Functions","title":"HierarchicalGaussianFiltering.enter_node_inputs!","text":"enter_node_inputs!(hgf::HGF, input)\n\nSet input values in input nodes. Can either take a single value, a vector of values, or a dictionary of input node names and corresponding values.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.get_prediction","page":"All Functions","title":"HierarchicalGaussianFiltering.get_prediction","text":"get_prediction(hgf::HGF, node_name::String)\n\nGet the prediction for the next timestep for a specified node in an HGF. If an agent is passed instead of an HGF, the HGF is extracted from the substruct in the agent. A single node can also be passed.\n\n\n\n\n\n","category":"function"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.get_surprise","page":"All Functions","title":"HierarchicalGaussianFiltering.get_surprise","text":"getsurprise(hgf::HGF, nodename::String = \"u\")\n\nCalculates the surprisal at the last input of a specified input node in an HGF. If an agent is passed instead of an HGF, the HGF is extracted from the substruct in the agent. If no node is specified, the surprisal of all input nodes is summed.\n\n\n\n\n\n","category":"function"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.get_surprise-Tuple{HierarchicalGaussianFiltering.CategoricalInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.get_surprise","text":"get_surprise(node::CategoricalInputNode)\n\nCalculate the surprise of a categorical input node on seeing the last input.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.get_surprise-Tuple{HierarchicalGaussianFiltering.ContinuousInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.get_surprise","text":"get_surprise(node::ContinuousInputNode)\n\nCalculate the surprise of an input node on seeing the last input.\n\nEquation: hatmu_j=sum_j=1^jvalueparents hatmu_j\n\nIm= -log(pdf(mathcalN(hatmu_j hatpi_j) u))\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.hgf_binary_softmax_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.hgf_binary_softmax_action","text":"hgf_binary_softmax_action(agent, input)\n\nAction model which gives a binary action. The action probability is the softmax of a specified state of a node.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"softmaxactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.hgf_gaussian_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.hgf_gaussian_action","text":"hgf_gaussian_action(agent::Agent, input)\n\nAction model which reports a given HGF state with Gaussian noise.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"gaussianactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.hgf_predict_category_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.hgf_predict_category_action","text":"hgf_predict_category_action(agent::Agent, input)\n\nAction model which gives a categorical prediction of the input, based on an HGF. The HGF used must be a categorical HGF.\n\nIn addition to the HGF substruct, the following must be present in the agent: Settings: \"targetcategoricalnode\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.hgf_unit_square_sigmoid_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.hgf_unit_square_sigmoid_action","text":"unit_square_sigmoid_action(agent, input)\n\nAction model which gives a binary action. The action probability is the unit square sigmoid of a specified state of a node.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"sigmoidactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.init_hgf-Tuple{}","page":"All Functions","title":"HierarchicalGaussianFiltering.init_hgf","text":"init_hgf(;\n    input_nodes::Union{String,Dict,Vector},\n    state_nodes::Union{String,Dict,Vector},\n    edges::Union{Vector{<:Dict},Dict},\n    node_defaults::Dict = Dict(),\n    update_order::Union{Nothing,Vector{String}} = nothing,\n    verbose::Bool = true,\n)\n\nInitialize an HGF. Node information includes 'name' and 'type' as keys, as well as any other parameters that are specific to the node type. Edge information includes 'child', as well as 'valueparents' and/or 'volatilityparents' as keys. Parents are vectors of either node name strings, or tuples with node names and coupling strengths.\n\nArguments\n\n'input_nodes::Union{String,Dict,Vector}': Input nodes to be created. Can either be a string with a node name, a dictionary with node information, or a vector of strings and/or dictionaries.\n'state_nodes::Union{String,Dict,Vector}': State nodes to be created. Can either be a string with a node name, a dictionary with node information, or a vector of strings and/or dictionaries.\n'edges::Union{Vector{<:Dict},Dict}': Edges to be created. Can either be a dictionary with edge information, or a vector of dictionaries.\n'node_defaults::Dict = Dict()': A dictionary with default values for the nodes. If a node is created without specifying a value for a parameter, the default value is used.\n'update_order::Union{Nothing,Vector{String}} = nothing': The order in which the nodes are updated. If set to nothing, the update order is determined automatically.\n'verbose::Bool = true': If set to false, warnings are hidden.\n\nExamples\n\n##Create a simple 2level continuous HGF##\n\n#List of input nodes\ninput_nodes = Dict(\n    \"name\" => \"u\",\n    \"type\" => \"continuous\",\n    \"evolution_rate\" => -2,\n)\n\n#List of state nodes\nstate_nodes = [\n    Dict(\n        \"name\" => \"x1\",\n        \"type\" => \"continuous\",\n        \"evolution_rate\" => -2,\n        \"initial_mean\" => 0,\n        \"initial_precision\" => 1,\n    ),\n    Dict(\n        \"name\" => \"x2\",\n        \"type\" => \"continuous\",\n        \"evolution_rate\" => -2,\n        \"initial_mean\" => 0,\n        \"initial_precision\" => 1,\n    ),\n]\n\n#List of child-parent relations\nedges = [\n    Dict(\n        \"child\" => \"u\",\n        \"value_parents\" => (\"x1\", 1),\n    ),\n    Dict(\n        \"child\" => \"x1\",\n        \"volatility_parents\" => (\"x2\", 1),\n    ),\n]\n\n#Initialize the HGF\nhgf = init_hgf(\n    input_nodes = input_nodes,\n    state_nodes = state_nodes,\n    edges = edges,\n)\n\n##Create a more complicated HGF without specifying information for each node##\n\n#Set defaults for all nodes\nnode_defaults = Dict(\n    \"evolution_rate\" => -2,\n    \"initial_mean\" => 0,\n    \"initial_precision\" => 1,\n    \"value_coupling\" => 1,\n    \"volatility_coupling\" => 1,\n)\n\ninput_nodes = [\n    \"u1\",\n    \"u2\",\n]\n\nstate_nodes = [\n    \"x1\",\n    \"x2\",\n    \"x3\",\n    \"x4\",\n]\n\nedges = [\n    Dict(\n        \"child\" => \"u1\",\n        \"value_parents\" => [\"x1\", \"x2\"],\n        \"volatility_parents\" => \"x3\"\n    ),\n    Dict(\n        \"child\" => \"u2\",\n        \"value_parents\" => [\"x1\"],\n    ),\n    Dict(\n        \"child\" => \"x1\",\n        \"volatility_parents\" => \"x4\",\n    ),\n    Dict(\n        \"child\" => \"x2\",\n        \"volatility_parents\" => \"x4\",\n    ),\n]\n\nhgf = init_hgf(\n    input_nodes = input_nodes,\n    state_nodes = state_nodes,\n    edges = edges,\n    node_defaults = node_defaults,\n)\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.init_node-Tuple{Any, Any, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.init_node","text":"init_node(input_or_state_node, node_defaults, node_info)\n\nFunction for creating a node, given specifications\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_JGET-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_JGET","text":"premade_JGET(config::Dict; verbose::Bool = true)\n\nThe HGF used in the JGET model. It has a single continuous input node u, with a value parent x1, and a volatility parent x3. x1 has volatility parent x2, and x3 has a volatility parent x4.\n\nConfig defaults:\n\n(\"u\", \"evolution_rate\"): -2\n(\"x1\", \"evolution_rate\"): -2\n(\"x2\", \"evolution_rate\"): -2\n(\"x3\", \"evolution_rate\"): -2\n(\"x4\", \"evolution_rate\"): -2\n(\"u\", \"x1\", \"value_coupling\"): 1\n(\"u\", \"x3\", \"value_coupling\"): 1\n(\"x1\", \"x2\", \"volatility_coupling\"): 1\n(\"x3\", \"x4\", \"volatility_coupling\"): 1\n(\"x1\", \"initial_mean\"): 0\n(\"x1\", \"initial_precision\"): 1\n(\"x2\", \"initial_mean\"): 0\n(\"x2\", \"initial_precision\"): 1\n(\"x3\", \"initial_mean\"): 0\n(\"x3\", \"initial_precision\"): 1\n(\"x4\", \"initial_mean\"): 0\n(\"x4\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_binary_2level-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_binary_2level","text":"premade_binary_2level(config::Dict; verbose::Bool = true)\n\nThe standard binary 2 level HGF model, which takes a binary input, and learns the probability of either outcome. It has one binary input node u, with a binary value parent x1, which in turn has a continuous value parent x2.\n\nConfig defaults:\n\n(\"u\", \"category_means\"): [0, 1]\n(\"u\", \"input_precision\"): Inf\n(\"x2\", \"evolution_rate\"): -2\n(\"x1\", \"x2\", \"value_coupling\"): 1\n(\"x2\", \"initial_mean\"): 0\n(\"x2\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_binary_3level-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_binary_3level","text":"premade_binary_3level(config::Dict; verbose::Bool = true)\n\nThe standard binary 3 level HGF model, which takes a binary input, and learns the probability of either outcome. It has one binary input node u, with a binary value parent x1, which in turn has a continuous value parent x2. This then has a continunous volatility parent x3.\n\nThis HGF has five shared parameters:  \"x2evolutionrates\" \"x2initialprecisions\" \"x2initialmeans\" \"valuecouplingsx1x2\" \"volatilitycouplingsx2x3\"\n\nConfig defaults:\n\n(\"u\", \"category_means\"): [0, 1]\n(\"u\", \"input_precision\"): Inf\n(\"x2\", \"evolution_rate\"): -2\n(\"x3\", \"evolution_rate\"): -2\n(\"x1\", \"x2\", \"value_coupling\"): 1\n(\"x2\", \"x3\", \"volatility_coupling\"): 1\n(\"x2\", \"initial_mean\"): 0\n(\"x2\", \"initial_precision\"): 1\n(\"x3\", \"initial_mean\"): 0\n(\"x3\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_categorical_3level-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_categorical_3level","text":"premade_categorical_3level(config::Dict; verbose::Bool = true)\n\nThe categorical 3 level HGF model, which takes an input from one of n categories and learns the probability of a category appearing. It has one categorical input node u, with a categorical value parent x1. The categorical node has a binary value parent x1n for each category n, each of which has a continuous value parent x2n. Finally, all of these continuous nodes share a continuous volatility parent x3.  Setting parameter values for x1 and x2 sets that parameter value for each of the x1n and x2n nodes.\n\nConfig defaults:\n\n\"n_categories\": 4\n(\"x2\", \"evolution_rate\"): -2\n(\"x3\", \"evolution_rate\"): -2\n(\"x1\", \"x2\", \"value_coupling\"): 1\n(\"x2\", \"x3\", \"volatility_coupling\"): 1\n(\"x2\", \"initial_mean\"): 0\n(\"x2\", \"initial_precision\"): 1\n(\"x3\", \"initial_mean\"): 0\n(\"x3\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_categorical_3level_state_transitions-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_categorical_3level_state_transitions","text":"premade_categorical_3level_state_transitions(config::Dict; verbose::Bool = true)\n\nThe categorical state transition 3 level HGF model, learns state transition probabilities between a set of n categorical states. It has one categorical input node u, with a categorical value parent x1n for each of the n categories, representing which category was transitioned from. Each categorical node then has a binary parent x1nm, representing the category m which the transition was towards. Each binary node x1nm has a continuous parent x2nm.  Finally, all of these continuous nodes share a continuous volatility parent x3.  Setting parameter values for x1 and x2 sets that parameter value for each of the x1nm and x2n_m nodes.\n\nThis HGF has five shared parameters:  \"x2evolutionrates\" \"x2initialprecisions\" \"x2initialmeans\" \"valuecouplingsx1x2\" \"volatilitycouplingsx2x3\"\n\nConfig defaults:\n\n- \"n_categories\": 4\n- (\"x2\", \"evolution_rate\"): -2\n- (\"x3\", \"evolution_rate\"): -2\n- (\"x1\", \"x2\", \"volatility_coupling\"): 1\n- (\"x2\", \"x3\", \"volatility_coupling\"): 1\n- (\"x2\", \"initial_mean\"): 0\n- (\"x2\", \"initial_precision\"): 1\n- (\"x3\", \"initial_mean\"): 0\n- (\"x3\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_continuous_2level-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_continuous_2level","text":"premade_continuous_2level(config::Dict; verbose::Bool = true)\n\nThe standard 2 level continuous HGF, which filters a continuous input. It has a continous input node u, with a single value parent x1, which in turn has a single volatility parent x2.\n\nConfig defaults:\n\n(\"u\", \"evolution_rate\"): -2\n(\"x1\", \"evolution_rate\"): -2\n(\"x2\", \"evolution_rate\"): -2\n(\"u\", \"x1\", \"value_coupling\"): 1\n(\"x1\", \"x2\", \"volatility_coupling\"): 1\n(\"x1\", \"initial_mean\"): 0\n(\"x1\", \"initial_precision\"): 1\n(\"x2\", \"initial_mean\"): 0\n(\"x2\", \"initial_precision\"): 1\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf","text":"premade_hgf(model_name::String, config::Dict = Dict(); verbose = true)\n\nCreate an HGF from the list of premade HGFs.\n\nArguments\n\n'model_name::String': Name of the premade HGF. Returns a list of possible model names if set to 'help'. \n'config::Dict = Dict()': A dictionary with configurations for the HGF, like parameters and settings.\n'verbose::Bool = true': If set to false, warnings are hidden.\n\n\n\n\n\n","category":"function"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf_binary_softmax-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf_binary_softmax","text":"premade_hgf_binary_softmax(config::Dict)\n\nCreate an agent suitable for the HGF binary softmax model.\n\nConfig defaults:\n\n\"HGF\": \"binary_3level\"\n\"softmaxactionprecision\": 1\n\"targetstate\": (\"x1\", \"predictionmean\")\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf_gaussian-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf_gaussian","text":"premade_hgf_gaussian(config::Dict)\n\nCreate an agent suitable for the HGF Gaussian action model.\n\nConfig defaults:\n\n\"HGF\": \"continuous_2level\"\n\"gaussianactionprecision\": 1\n\"targetstate\": (\"x1\", \"posteriormean\")\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf_multiple_actions-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf_multiple_actions","text":"premade_hgf_multiple_actions(config::Dict)\n\nCreate an agent suitable for multiple aciton models that can depend on an HGF substruct. The used action models are specified as a vector.\n\nConfig defaults:\n\n\"HGF\": \"continuous_2level\"\n\"hgfactions\": [\"gaussianaction\", \"softmaxaction\", \"unitsquaresigmoidaction\"]\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf_predict_category-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf_predict_category","text":"premade_hgf_predict_category(config::Dict)\n\nCreate an agent suitable for the HGF predict category model.\n\nConfig defaults:\n\n\"HGF\": \"categorical_3level\"\n\"targetcategoricalnode\": \"x1\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.premade_hgf_unit_square_sigmoid-Tuple{Dict}","page":"All Functions","title":"HierarchicalGaussianFiltering.premade_hgf_unit_square_sigmoid","text":"premade_hgf_binary_softmax(config::Dict)\n\nCreate an agent suitable for the HGF unit square sigmoid model.\n\nConfig defaults:\n\n\"HGF\": \"binary_3level\"\n\"sigmoidactionprecision\": 1\n\"targetstate\": (\"x1\", \"predictionmean\")\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf!-Tuple{HierarchicalGaussianFiltering.HGF, Union{Missing, Real, Dict{String, <:Union{Missing, Real}}, Vector{<:Union{Missing, Real}}}}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf!","text":"update_hgf!(\n    hgf::HGF,\n    inputs::Union{\n        Real,\n        Missing,\n        Vector{<:Union{Real,Missing}},\n        Dict{String,<:Union{Real,Missing}},\n    },\n)\n\nUpdate all nodes in an HGF based on an input. The input can either be missing, a single value, a vector of values, or a dictionary of input node names and corresponding values.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf_binary_softmax_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf_binary_softmax_action","text":"update_hgf_softmax_action(agent::Agent, input)\n\nAction model that first updates the HGF, and then passes a state from the HGF through a softmax to give a binary action.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"softmaxactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf_gaussian_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf_gaussian_action","text":"update_hgf_gaussian_action(agent::Agent, input)\n\nAction model that first updates the HGF, and then reports a given HGF state with Gaussian noise.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"gaussianactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf_multiple_actions-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf_multiple_actions","text":"update_hgf_multiple_actions(agent::Agent, input)\n\nAction model that first updates the HGF, and then runs multiple action models.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf_predict_category_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf_predict_category_action","text":"update_hgf_predict_category_action(agent::Agent, input)\n\nAction model that first updates the HGF, and then returns a categorical prediction of the input. The HGF used must be a categorical HGF.\n\nIn addition to the HGF substruct, the following must be present in the agent: Settings: \"targetcategoricalnode\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_hgf_unit_square_sigmoid_action-Tuple{ActionModels.Agent, Any}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_hgf_unit_square_sigmoid_action","text":"update_hgf_unit_square_sigmoid_action(agent::Agent, input)\n\nAction model that first updates the HGF,  and then passes a state from the HGF through a unit square sigmoid transform to give a binary action.\n\nIn addition to the HGF substruct, the following must be present in the agent: Parameters: \"sigmoidactionprecision\" Settings: \"target_state\"\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_input!-Tuple{HierarchicalGaussianFiltering.AbstractInputNode, Union{Missing, Real}}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_input!","text":"update_node_input!(node::AbstractInputNode, input::Union{Real,Missing})\n\nUpdate the prediction of a single input node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_posterior!-Tuple{HierarchicalGaussianFiltering.AbstractStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_posterior!","text":"update_node_posterior!(node::AbstractStateNode)\n\nUpdate the posterior of a single continuous state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_posterior!-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_posterior!","text":"update_node_posterior!(node::CategoricalStateNode)\n\nUpdate the posterior of a single binary state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.AbstractInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::AbstractInputNode)\n\nUpdate the posterior of a single input node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.AbstractStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::AbstractStateNode)\n\nUpdate the prediction of a single state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.BinaryInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::BinaryInputNode)\n\nThere is no prediction update for binary input nodes, as the prediction precision is constant.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::BinaryStateNode)\n\nUpdate the prediction of a single binary state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.CategoricalInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::CategoricalInputNode)\n\nThere is no prediction update for categorical input nodes, as the prediction precision is constant.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_prediction!-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_prediction!","text":"update_node_prediction!(node::CategoricalStateNode)\n\nUpdate the prediction of a single categorical state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_value_prediction_error!-Tuple{HierarchicalGaussianFiltering.AbstractInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_value_prediction_error!","text":"update_node_value_prediction_error!(node::AbstractInputNode)\n\nUpdate the value prediction error of a single input node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_value_prediction_error!-Tuple{HierarchicalGaussianFiltering.AbstractStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_value_prediction_error!","text":"update_node_value_prediction_error!(node::AbstractStateNode)\n\nUpdate the value prediction error of a single state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_value_prediction_error!-Tuple{HierarchicalGaussianFiltering.BinaryInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_value_prediction_error!","text":"update_node_value_prediction_error!(node::BinaryInputNode)\n\nUpdate the value prediction error of a single binary input node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_value_prediction_error!-Tuple{HierarchicalGaussianFiltering.CategoricalInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_value_prediction_error!","text":"update_node_value_prediction_error!(node::CategoricalInputNode)\n\nThere is no value prediction error update for categorical input nodes.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.AbstractInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::AbstractInputNode)\n\nUpdate the value prediction error of a single input node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.AbstractStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::AbstractStateNode)\n\nUpdate the volatility prediction error of a single state node.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.BinaryInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::BinaryInputNode)\n\nThere is no volatility prediction error update for binary input nodes.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.BinaryStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::BinaryStateNode)\n\nThere is no volatility prediction error update for binary state nodes.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.CategoricalInputNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::CategoricalInputNode)\n\nThere is no volatility prediction error update for categorical input nodes.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/#HierarchicalGaussianFiltering.update_node_volatility_prediction_error!-Tuple{HierarchicalGaussianFiltering.CategoricalStateNode}","page":"All Functions","title":"HierarchicalGaussianFiltering.update_node_volatility_prediction_error!","text":"update_node_volatility_prediction_error!(node::CategoricalStateNode)\n\nThere is no volatility prediction error update for categorical state nodes.\n\n\n\n\n\n","category":"method"},{"location":"generated_markdowns/all_functions/","page":"All Functions","title":"All Functions","text":"","category":"page"},{"location":"generated_markdowns/all_functions/","page":"All Functions","title":"All Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"theory/vape/#Computations-for-VAPE-coupling","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"","category":"section"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"The exact computations of the UPDATE depend on the nature of the coupling with the child node(s), while both the PE step and the PREDICTION step depend on the coupling with the parent node(s).","category":"page"},{"location":"theory/vape/#Update-Step","page":"Computations for VAPE coupling","title":"Update Step","text":"","category":"section"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"If Node~i is the value parent of Node i-1, then the following update equations apply to Node~i:","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"beginalign\npi_i^(k) = hatpi_i^(k) + alpha_i-1i^2 hatpi_i-1^(k)\nmu_i^(k) = hatmu_i^(k) + fracalpha_i-1i^2 hatpi_i-1^(k) alpha_i-1i^2 hatpi_i-1^(k) + hatpi_i^(k) delta_i-1^(k)\nendalign","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"We note here that we can let the update of the precision happen first, and therefore use it for the update of the mean:","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"beginalign\npi_i^(k) = hatpi_i^(k) + alpha_i-1i^2 hatpi_i-1^(k)\nmu_i^(k) = hatmu_i^(k) + fracalpha_i-1i^2 hatpi_i-1^(k) pi_i^(k) delta_i-1^(k)\nendalign","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"In sum, at the time of the update, Node~i needs to have access to the following quantities:","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Its own predictions: hatmu_i^(k), hatpi_i^(k)  \nCoupling strength: alpha_i-1i  \nFrom level below: delta_i-1^(k), hatpi_i-1^(k)  ","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"All of these are available at the time of the update. Node~i therefore only needs to receive the PE and the predicted precision from the level below to perform its update.","category":"page"},{"location":"theory/vape/#Prediction-Error-Step","page":"Computations for VAPE coupling","title":"Prediction Error Step","text":"","category":"section"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"We will assume in the following, that Node~i is the value child of Node i+1. Then the following quantities have to be sent up to Node i+1 (cf. necessary information from level below in a value parent):","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Predicted precision: hatpi_i^(k)\nPrediction error: delta_i^(k)","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Node~i has already performed the PREDICTION step on the previous trial, so it has already computed the predicted precision of the current trial,~hatpi_i^(k). Hence, in the PE step, it needs to perform only the following calculation:","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"beginequation\ndelta_i^(k) = mu_i^(k) - hatmu_i^(k)\nendequation","category":"page"},{"location":"theory/vape/#Prediction-Step","page":"Computations for VAPE coupling","title":"Prediction Step","text":"","category":"section"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Still assuming that Node~i is the value child of Node i+1, the PREDICTION step consists of the following computations:","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"beginalign\nhatmu_i^(k+1) = mu_i^(k) + alpha_ii+1 mu_i+1^(k)\nhatpi_i^(k+1) = frac1frac1pi_i^(k) + nu_i^(k+1) \nendalign","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"with","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"beginequation\nnu_i^(k+1) = exp(omega_i)\nendequation","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Note that if Node~i additionally has a VOPE parent node, the estimated volatility nu_i^(k+1) that enters the precision update would also depend on the posterior mean of that volatility parent (cf. PREDICTION step for VOPE coupling).","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"In general, the prediction of the mean will depend only on whether Node~i has a value parent or not, whereas the prediction of the precision only depends on whether Node~i has a volatility parent or not.","category":"page"},{"location":"theory/vape/","page":"Computations for VAPE coupling","title":"Computations for VAPE coupling","text":"Thus, the PREDICTION step only depends on knowing the node's own posteriors and receiving the value parent's posterior in time before the new input arrives.","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/tutorials/classic_usdchf.jl\"","category":"page"},{"location":"generated_markdowns/classic_usdchf/#Tutorial-on-2-level-continuous-HGF","page":"classic continouous","title":"Tutorial on 2-level continuous HGF","text":"","category":"section"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"#This is a replication of the tutorial from the MATLAB toolbox, using an HGF to filter the exchange rates between USD and CHF","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"First load packages","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"using ActionModels\nusing HierarchicalGaussianFiltering\nusing Plots\nusing StatsPlots\nusing Distributions","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Get the path for the HGF superfolder","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"hgf_path = dirname(dirname(pathof(HierarchicalGaussianFiltering)))","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Add the path to the data files","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"data_path = hgf_path * \"/docs/src/tutorials/data/\"","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Load the data","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"inputs = Float64[]\nopen(data_path * \"classic_usdchf_inputs.dat\") do f\n    for ln in eachline(f)\n        push!(inputs, parse(Float64, ln))\n    end\nend\n\n#Create HGF\nhgf = premade_hgf(\"continuous_2level\", verbose = false);\nagent = premade_agent(\"hgf_gaussian_action\", hgf, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Set parameters for parameter recovyer","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"parameters = Dict(\n    (\"u\", \"x1\", \"value_coupling\") => 1.0,\n    (\"x1\", \"x2\", \"volatility_coupling\") => 1.0,\n    (\"u\", \"evolution_rate\") => -log(1e4),\n    (\"x1\", \"evolution_rate\") => -13,\n    (\"x2\", \"evolution_rate\") => -2,\n    (\"x1\", \"initial_mean\") => 1.04,\n    (\"x1\", \"initial_precision\") => 1 / (0.0001),\n    (\"x2\", \"initial_mean\") => 1.0,\n    (\"x2\", \"initial_precision\") => 1 / 0.1,\n    \"gaussian_action_precision\" => 100,\n);\n\nset_parameters!(agent, parameters)\nreset!(agent)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Evolve agent","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"actions = give_inputs!(agent, inputs);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Plot trajectories","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_trajectory(\n    agent,\n    \"u\",\n    size = (1300, 500),\n    xlims = (0, 615),\n    markersize = 3,\n    markercolor = \"green2\",\n    title = \"HGF trajectory\",\n    ylabel = \"CHF-USD exchange rate\",\n    xlabel = \"Trading days since 1 January 2010\",\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_trajectory!(agent, (\"x1\", \"posterior\"), color = \"red\")\nplot_trajectory!(\n    agent,\n    \"action\",\n    size = (1300, 500),\n    xlims = (0, 614),\n    markersize = 3,\n    markercolor = \"orange\",\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_trajectory(\n    agent,\n    \"x2\",\n    color = \"blue\",\n    size = (1300, 500),\n    xlims = (0, 615),\n    xlabel = \"Trading days since 1 January 2010\",\n    title = \"Volatility parent trajectory\",\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Set priors for fitting","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"fixed_parameters = Dict(\n    (\"u\", \"x1\", \"value_coupling\") => 1.0,\n    (\"x1\", \"x2\", \"volatility_coupling\") => 1.0,\n    (\"x1\", \"initial_mean\") => 0,\n    (\"x1\", \"initial_precision\") => 2000,\n    (\"x2\", \"initial_mean\") => 1.0,\n    (\"x2\", \"initial_precision\") => 600.0,\n    \"gaussian_action_precision\" => 100,\n);\n\nparam_priors = Dict(\n    (\"u\", \"evolution_rate\") => Normal(-10, 2),\n    (\"x1\", \"evolution_rate\") => Normal(-10, 4),\n    (\"x2\", \"evolution_rate\") => Normal(-4, 4),\n);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Prior predictive simulation plot","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_predictive_simulation(\n    param_priors,\n    agent,\n    inputs,\n    (\"x1\", \"posterior_mean\");\n    n_simulations = 3,\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Do parameter recovery","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"fitted_model = fit_model(\n    agent,\n    param_priors,\n    inputs,\n    actions,\n    fixed_parameters = fixed_parameters,\n    verbose = true,\n    n_iterations = 10,\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Plot the chains","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot(fitted_model)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Plot prior posterior distributions","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_parameter_distribution(fitted_model, param_priors)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"Posterior predictive plot","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"plot_predictive_simulation(\n    fitted_model,\n    agent,\n    inputs,\n    (\"x1\", \"posterior_mean\");\n    n_simulations = 3,\n)","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"","category":"page"},{"location":"generated_markdowns/classic_usdchf/","page":"classic continouous","title":"classic continouous","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/tutorials/classic_binary.jl\"","category":"page"},{"location":"generated_markdowns/classic_binary/#Tutorial-on-3-level-binary","page":"classic binary","title":"Tutorial on 3-level binary","text":"","category":"section"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"This tutorial is a copy of the 3 level binary hgf tutorial in MATLAB","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"First load packages","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"using ActionModels\nusing HierarchicalGaussianFiltering\nusing CSV\nusing DataFrames\nusing Plots\nusing StatsPlots\nusing Distributions","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Get the path for the HGF superfolder","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"hgf_path = dirname(dirname(pathof(HierarchicalGaussianFiltering)))","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Add the path to the data files","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"data_path = hgf_path * \"/docs/src/tutorials/data/\"","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Load the data","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"inputs = CSV.read(data_path * \"classic_binary_inputs.csv\", DataFrame)[!, 1];\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Create an HGF","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"hgf_parameters = Dict(\n    (\"u\", \"category_means\") => Real[0.0, 1.0],\n    (\"u\", \"input_precision\") => Inf,\n    (\"x2\", \"evolution_rate\") => -2.5,\n    (\"x2\", \"initial_mean\") => 0,\n    (\"x2\", \"initial_precision\") => 1,\n    (\"x3\", \"evolution_rate\") => -6.0,\n    (\"x3\", \"initial_mean\") => 1,\n    (\"x3\", \"initial_precision\") => 1,\n    (\"x1\", \"x2\", \"value_coupling\") => 1.0,\n    (\"x2\", \"x3\", \"volatility_coupling\") => 1.0,\n);\n\nhgf = premade_hgf(\"binary_3level\", hgf_parameters, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Create an agent","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"agent_parameters = Dict(\"sigmoid_action_precision\" => 5);\nagent =\n    premade_agent(\"hgf_unit_square_sigmoid_action\", hgf, agent_parameters, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Evolve agent and save actions","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"actions = give_inputs!(agent, inputs);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Plot the trajectory of the agent","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"plot_trajectory(agent, (\"u\", \"input_value\"))\nplot_trajectory!(agent, (\"x1\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"plot_trajectory(agent, (\"x2\", \"posterior\"))\nplot_trajectory(agent, (\"x3\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Set fixed parameters","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"fixed_parameters = Dict(\n    \"sigmoid_action_precision\" => 5,\n    (\"u\", \"category_means\") => Real[0.0, 1.0],\n    (\"u\", \"input_precision\") => Inf,\n    (\"x2\", \"initial_mean\") => 0,\n    (\"x2\", \"initial_precision\") => 1,\n    (\"x3\", \"initial_mean\") => 1,\n    (\"x3\", \"initial_precision\") => 1,\n    (\"x1\", \"x2\", \"value_coupling\") => 1.0,\n    (\"x2\", \"x3\", \"volatility_coupling\") => 1.0,\n    (\"x3\", \"evolution_rate\") => -6.0,\n);\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Set priors for parameter recovery","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"param_priors = Dict((\"x2\", \"evolution_rate\") => Normal(-3.0, 0.5));\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Prior predictive plot","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"plot_predictive_simulation(\n    param_priors,\n    agent,\n    inputs,\n    (\"x1\", \"prediction_mean\"),\n    n_simulations = 100,\n)","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Get the actions from the MATLAB tutorial","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"actions = CSV.read(data_path * \"classic_binary_actions.csv\", DataFrame)[!, 1];\nnothing #hide","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Fit the actions","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"fitted_model = fit_model(\n    agent,\n    param_priors,\n    inputs,\n    actions,\n    fixed_parameters = fixed_parameters,\n    verbose = true,\n    n_iterations = 10,\n)","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"#Plot the chains\nplot(fitted_model)","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Plot the posterior","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"plot_parameter_distribution(fitted_model, param_priors)","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"Posterior predictive plot","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"plot_predictive_simulation(\n    fitted_model,\n    agent,\n    inputs,\n    (\"x1\", \"prediction_mean\"),\n    n_simulations = 3,\n)","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"","category":"page"},{"location":"generated_markdowns/classic_binary/","page":"classic binary","title":"classic binary","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/fitting_hgf_models.jl\"","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/#Fitting-parameters-in-HGF-agents","page":"Fitting an HGF-agent model to data","title":"Fitting parameters in HGF agents","text":"","category":"section"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Introduction To Fitting Models\nSetting Priors and The Fit_model() Function\nPlotting Functions\nPredictive Simulations","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/#Introduction-To-Fitting-Models-Function","page":"Fitting an HGF-agent model to data","title":"Introduction To Fitting Models Function","text":"","category":"section"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"When you work with participants' data in HGF-agents and you have one or more target parameters in sight for investigation, you can recover them with model fitting. When you fit models for different groups of participant, you can idnetify group differences based on the parameter recovery.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/#Setting-Priors-and-The-Fit_model()","page":"Fitting an HGF-agent model to data","title":"Setting Priors and The Fit_model()","text":"","category":"section"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Hierarchical Gaussian Filtering uses the fitmodel() function from the ActionModels.jl package. The fit model() function takes the following inputs:","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"(Image: Image1)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Let us run through the inputs to the function one by one.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"agent::Agent: a specified agent created with either premade agent or init_agent.\nparampriors::Dict: priors (written as distributions) for the parameters you wish to fit. e.g. priors = Dict(\"learningrate\" => Uniform(0, 1))\ninputs:Array: array of inputs.\nactions::Array: array of actions.\nfixed_parameters::Dict = Dict(): fixed parameters if you wish to change the parameter settings of the parameters you dont fit\nsampler = NUTS(): specify the type of sampler. See Turing documentation for more details on sampler types.\nn_iterations = 1000: iterations pr. chain.\nn_chains = 1: amount of chains.\nverbose = true: set to false to hide warnings\nshow_sample_rejections = false: if set to true, get a message every time a sample is rejected.\nimpute_missing_actions = false : if true, include missing actions in the fitting process.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We will run through an example of fitting an agent model to data.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"load packages","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"using ActionModels\nusing HierarchicalGaussianFiltering","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We will define a binary 3-level HGF and its parameters","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"hgf_parameters = Dict(\n    (\"u\", \"category_means\") => Real[0.0, 1.0],\n    (\"u\", \"input_precision\") => Inf,\n    (\"x2\", \"evolution_rate\") => -2.5,\n    (\"x2\", \"initial_mean\") => 0,\n    (\"x2\", \"initial_precision\") => 1,\n    (\"x3\", \"evolution_rate\") => -6.0,\n    (\"x3\", \"initial_mean\") => 1,\n    (\"x3\", \"initial_precision\") => 1,\n    (\"x1\", \"x2\", \"value_coupling\") => 1.0,\n    (\"x2\", \"x3\", \"volatility_coupling\") => 1.0,\n)\n\nhgf = premade_hgf(\"binary_3level\", hgf_parameters, verbose = false)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Create an agent","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"agent_parameters = Dict(\"sigmoid_action_precision\" => 5);\nagent =\n    premade_agent(\"hgf_unit_square_sigmoid_action\", hgf, agent_parameters, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Define a set of inputs","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"inputs =\n    [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0];\nnothing #hide","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Evolve agent and save actions","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"actions = give_inputs!(agent, inputs)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We can  by plotting the actions our agent has produced.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"using StatsPlots\nusing Plots\nplot_trajectory(agent, (\"u\", \"input_value\"))\nplot_trajectory!(agent, (\"x1\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"When defining the fixed parameters for fit_model() it overrites any previous parameter settings with the \"newly\" defined fixed parameters. If you dont state any fixed parameters it uses the current parameter values.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We define a set of fixed parameters to use in this fitting process:","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Set fixed parameters. We choose to fit the evolution rate of the x2 node.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"fixed_parameters = Dict(\n    \"sigmoid_action_precision\" => 5,\n    (\"u\", \"category_means\") => Real[0.0, 1.0],\n    (\"u\", \"input_precision\") => Inf,\n    (\"x2\", \"initial_mean\") => 0,\n    (\"x2\", \"initial_precision\") => 1,\n    (\"x3\", \"initial_mean\") => 1,\n    (\"x3\", \"initial_precision\") => 1,\n    (\"x1\", \"x2\", \"value_coupling\") => 1.0,\n    (\"x2\", \"x3\", \"volatility_coupling\") => 1.0,\n    (\"x3\", \"evolution_rate\") => -6.0,\n);\nnothing #hide","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"As you can read from the fixed parameters, the evolution rate of x2 is not configured. We set the prior for the x2 evolution rate:","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"using Distributions\nparam_priors = Dict((\"x2\", \"evolution_rate\") => Normal(-3.0, 0.5));\nnothing #hide","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We can fit the evolution rate by inputting the variables:","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Fit the actions","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"fitted_model = fit_model(\n    agent,\n    param_priors,\n    inputs,\n    actions,\n    fixed_parameters = fixed_parameters,\n    verbose = true,\n    n_iterations = 10,\n)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/#Plotting-Functions","page":"Fitting an HGF-agent model to data","title":"Plotting Functions","text":"","category":"section"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot(fitted_model)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Plot the posterior","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot_parameter_distribution(fitted_model, param_priors)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/#Predictive-Simulations-with-plot_predictive_distributions()","page":"Fitting an HGF-agent model to data","title":"Predictive Simulations with plot_predictive_distributions()","text":"","category":"section"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Hierarical Gaussian Filtering uses the plot_predictive_distribution function from Action Models to produce and plot predictive prior/posterior simulations.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"For more information on predictive simulations check out ActionModels.jl documentation [LINK]","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We will provide a code example of prior and posterior predictive simulation. We can fit a different parameter, and start with a  prior predictive check.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Set prior we wish to simulate over","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"param_priors = Dict((\"x3\", \"initial_precision\") => Normal(1.0, 0.5));\nnothing #hide","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"When we look at our predictive simulation plot we should aim to see actions in the plausible space they could be in. Prior predictive plot","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot_predictive_simulation(\n    param_priors,\n    agent,\n    inputs,\n    (\"x1\", \"prediction_mean\"),\n    n_simulations = 100,\n)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Let's fit our model","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"Fit the actions where we use the default parameter values from the HGF.","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"fitted_model =\n    fit_model(agent, param_priors, inputs, actions, verbose = true, n_iterations = 10)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We can place our turing chain as a our posterior in the function, and get our posterior predictive simulation plot:","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot_predictive_simulation(\n    fitted_model,\n    agent,\n    inputs,\n    (\"x1\", \"prediction_mean\"),\n    n_simulations = 100,\n)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"We can get the posterior","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"get_posteriors(fitted_model)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot the chains","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot(fitted_model)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot the parameter distribution","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"plot_parameter_distribution(fitted_model, param_priors)","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"","category":"page"},{"location":"generated_markdowns/fitting_hgf_models/","page":"Fitting an HGF-agent model to data","title":"Fitting an HGF-agent model to data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"theory/vope/#Computations-for-VOPE-coupling","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"","category":"section"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"As in the case of VAPE coupling, the exact computations of the UPDATE step depend on the nature of the coupling with the child node(s), while both the PE step and the PREDICTION step depend on the coupling with the parent node(s).","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"To describe the computations entailed by VOPE coupling, we will introduce two changes to the notation. First of all, we will express the volatility PE, or VOPE, as a function of the previously defined value PE, or VAPE. That means from now on, we will use the character delta_i only for VAPEs:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginequation\ndelta_i^(k) equiv delta_i^(k VAPE) = mu_i^(k) - hatmu_i^(k)\nendequation","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"and introduce a new character Delta_i for VOPEs, which we define as","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginequation\n  beginsplit\n    Delta_i^(k) equiv delta_i^(k VOPE) = frac frac1pi_i^(k) + (mu_i^(k) - hatmu_i^(k))^2  frac1pi_i^(k-1) + nu_i^(k)  - 1 \n    = hatpi_i^(k) left( frac1pi_i^(k) + (mu_i^(k) - hatmu_i^(k))^2 right) - 1 \n    = hatpi_i^(k) left( frac1pi_i^(k) + (delta_i^(k))^2 right) - 1 \n    =  frachatpi_i^(k)pi_i^(k) + hatpi_i^(k) (delta_i^(k))^2 - 1 \n  endsplit\nendequation","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Note that from the first to the second line, we have used the following definition:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginequation*\nhatpi_i-1^(k) = frac1 frac1pi_i-1^(k-1) + nu_i-1^(k) \nendequation*","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"This ensures that a given node does not need to have access to the posterior precision from the level below: pi_i-1^(k-1), which facilitates implementation.","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"In sum, we are introducing a second prediction error unit Delta_i which is concerned with deviations from predicted uncertainty and is informed by value prediction errors and other estimates of uncertainty. It is this prediction error - a function of the unweighted (squared) value prediction error with a new precision weight - which communicates between a level's nodes and a level's volatility parent's nodes.","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Second, we will introduce another quantity, which we term the (auxiliary) expected precision","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginequation\ngamma_i^(k) = nu_i^(k) hatpi_i^(k)\nendequation","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"which will be computed as part of the PREDICTION step and only serves to simplify the equations and the corresponding message passing.","category":"page"},{"location":"theory/vope/#Update-Step","page":"Computations for VOPE coupling","title":"Update Step","text":"","category":"section"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"If Node i is the volatility parent of Node i-1, then the following update equations apply to Node i:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginalign*\npi_i^(k) = hatpi_i^(k)\n+ frac12(kappa_i-1 nu_i-1^(k) hatpi_i-1^(k))^2\n* (1 + (1 - frac1pi_i-1^(k-1) nu_i-1^(k))\ndelta_i-1^(k))\n= hatpi_i^(k)\n+ frac12(kappa_i-1 nu_i-1^(k) hatpi_i-1^(k))^2\n* (1 + (2 - frac1hatpi_i-1^(k) nu_i-1^(k))\ndelta_i-1^(k))\nmu_i^(k) = hatmu_i^(k)\n+ frac12kappa_i-1 nu_i-1^(k)\nfrachatpi_i-1^(k)pi_i^(k) delta_i-1^(k)\nendalign*","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"where we have again used the definition of the predicted precision hatpi_i-1^(k) to derive an expression for the posterior precision from the previous trial pi_i-1^(k-1):","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginalign*\nhatpi_i-1^(k) = frac1 frac1pi_i-1^(k-1) + nu_i-1^(k) \nLeftrightarrow pi_i-1^(k-1) = frac1 frac1hatpi_i-1^(k) - nu_i-1^(k) \nendalign*","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"With the changes from above, namely the definitions of the \\textsf{VOPE} Delta_i and the expected precision gamma_i^(k), the update equations for the precision and the mean in volatility coupling simplify to: \\vspace{0.5cm}","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginalign\npi_i^(k) = hatpi_i^(k)\n+ frac12 (kappa_ii-1 gamma_i-1^(k))^2\n+ (kappa_ii-1 gamma_i-1^(k))^2 Delta_i-1^(k)\n- frac12 kappa_ii-1^2 gamma_i-1^(k) Delta_i-1^(k)\nmu_i^(k) = hatmu_i^(k)\n+ frac12 frackappa_ii-1 gamma_i-1^(k)pi_i^(k) Delta_i-1^(k)\nendalign","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Therefore, at the time of the update, Node i needs to have access to the following quantities:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Its own predictions: hatmu_i^(k), hatpi_i^(k)\nCoupling strength: kappa_ii-1\nFrom level below: Delta_i-1^(k), gamma_i-1^(k)","category":"page"},{"location":"theory/vope/#Prediction-Error-Step","page":"Computations for VOPE coupling","title":"Prediction Error Step","text":"","category":"section"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"The exact computation of the prediction error depends, like the computation of the new prediction, on the nature of the coupling with the parent nodes. We will therefore assume in the following, that Node i is the volatility child of Node i+1. Then the following quantities have to be sent up to Node i+1 (see also necessary information from level below in a volatility parent):","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Expected precision: gamma_i^(k)\nPrediction error: Delta_i^(k)","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Node i has already performed the \\textsf{PREDICTION step} on the previous trial, so it has already computed the predicted precision, hatpi_i^(k), and the volatiliy estimate, nu_i^(k), and out of these the expected precision, gamma_i^(k), for the current trial. Hence, in the PE step, it needs to perform only the following calculations:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginalign\ndelta_i^(k) = mu_i^(k) - hatmu_i^(k)\nDelta_i^(k) = frachatpi_i^(k)pi_i^(k) + hatpi_i^(k) (delta_i^(k))^2 - 1\nendalign","category":"page"},{"location":"theory/vope/#Prediction-Step","page":"Computations for VOPE coupling","title":"Prediction Step","text":"","category":"section"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Still assuming that Node i is the volatility child of Node i+1, the PREDICTION step consists of the following simple computations:","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"beginalign\nhatmu_i^(k+1) = mu_i^(k)\nnu_i^(k+1) = exp(kappa_i mu_i+1^(k) + omega_i)\nhatpi_i^(k+1) = frac1frac1pi_i^(k) + nu_i^(k+1) \ngamma_i^(k+1) = nu_i^(k+1) hatpi_i^(k+1)\nendalign","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Thus, the prediction for trial k+1 depends again only on receiving the posterior mean of Node i+1 on trial k, and knowing the Node's own posteriors.","category":"page"},{"location":"theory/vope/","page":"Computations for VOPE coupling","title":"Computations for VOPE coupling","text":"Note that if Node~i additionally has a VAPE parent node, the prediction of the new mean, hatmu_i^k+1 would also depend on the posterior mean of that value parent (cf. PREDICTION step for VAPE coupling).","category":"page"},{"location":"theory/genmodel/#The-generative-model-of-the-HGF:-Volatility-vs.-value-coupling","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"","category":"section"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"In the generative model of the HGF, (hidden) states of the world perform Gaussian random walks in time and can produce outcomes which are perceived by an observer as inputs. States can influence each other via volatility coupling or via value coupling.","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"In the classical 3-level binary HGF as presented in Mathys (2011), the two states of interest, x_2 and x_3, are coupled to each other via volatility coupling, which means that for state x_2, the mean of the Gaussian random walk on trial k is given by its previous value x_2^(k-1), while the step size (or variance) depends on the current value of the higher level state, x_3^(k):","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"    x_2^(k) sim mathcalN(x_2^(k)  x_2^(k-1)  f(x_3^(k)))","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"where the exact dependency is of the form","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"    f(x_3^(k)) = exp(kappa_2 x_3^(k) + omega_2)","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"However, a higher-level state can also have influence on a lower-level state by influencing its mean. In that case, the mean of the Gaussian random walk at one level is a function not only of its own previous value, but also the current value of the higher-level state (with step size either constant or a function of another state):","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"    x_2^(k) sim mathcalN(x_2^(k)  x_2^(k-1) + alpha_42 x_4^(k)  exp(omega_2))","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"which means constant step size, or","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"    x_2^(k) sim mathcalN(x_2^(k)  x_2^(k-1) + alpha_42 x_4^(k)  exp(kappa_2 x_3^(k) + omega_2))","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"In other words, any given state in the world can be modelled as having a volatility parent state, a value parent state, or both, or none (in which case it evolves as a Gaussian random walk around its previous value with fixed step size). Consequently, when inferring on the evolution of these states, the exact belief update equations (which include the computation of new predictions, posterior values, and prediction errors, and represent an approximate inversion of this generative model, see Mathys (2011) depend on the nature of the coupling of a given state with its parent and children states. In particular, the nodes that implement the belief updates will communicate with their value parents via value prediction errors, or VAPEs, and via volatility prediction errors, or VOPEs, with their volatility parents.","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"(Image: Figure1) An example of a generative model of sensory inputs with six hidden states. Volatility coupling is depicted with dashed lines, value coupling with straight lines.","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"In Figure 1 we have drawn an example setup with six different environmental states and one outcome. Here, we have denoted states that function as value parents for other states as x_i, and states that function as volatility parents as checkx_i. Volatility coupling is depicted by curvy arrows, value coupling by straight arrows, and observable outcomes are linked to their hidden states via double arrows.","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"For the example illustrated in Figure 1 the following equations describe the generative model:","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"beginalign\nu^(k) sim mathcalN(u^(k)  x_1^(k)  sigma_u) \nx_1^(k)           sim mathcalN(x_1^(k)  x_1^(k-1) + alpha_21 x_2^(k)  exp(kappa_1 checkx_1^(k) + omega_1)) \ncheckx_1^(k)   sim mathcalN(checkx_1^(k)  checkx_1^(k-1) + alpha_3check1 x_3^(k)  exp(omega_check1)) \nx_2^(k)           sim mathcalN(x_2^(k)  x_2^(k-1)  exp(kappa_2 checkx_2^(k) + omega_2)) \ncheckx_2^(k)   sim mathcalN(checkx_2^(k)  checkx_2^(k-1)  exp(omega_check2)) \nx_3^(k)           sim mathcalN(x_3^(k)  x_3^(k-1)  exp(kappa_3 checkx_3^(k) + omega_3)) \ncheckx_3^(k)   sim mathcalN(checkx_3^(k)  checkx_3^(k-1)  exp(omega_check3)) \nendalign","category":"page"},{"location":"theory/genmodel/","page":"The generative model of the HGF: Volatility vs. value coupling","title":"The generative model of the HGF: Volatility vs. value coupling","text":"Note that in this example, all states that are value parents of other states (or outcomes) have their own volatility parent, while states that are volatility parents to other nodes either have a value parent (as state checkx_1), or no parents (as states checkx_2 and checkx_3). This is deliberately so, and we will see these two motifs - every state of a hierarchy has its own volatility estimation, and volatility states only have value parents - reappear in the following chapters.","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/premade_HGF.jl\"","category":"page"},{"location":"generated_markdowns/premade_HGF/#Premade-HGF's-in-the-Hierarchical-Gaussian-Filtering-package","page":"List Of Premade HGF's","title":"Premade HGF's in the Hierarchical Gaussian Filtering package","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"For information on states and parameters of the nodes see section on HGF nodes [LINK]","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Continous 2-level HGF\nJGET HGF\nBinary 2-level HGF\nBinary 3-level HGF\nCategorical 3-level HGF\nCategorical 3-level state transition HGF","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"(Image: continuous 2-level graph)","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"#Load data for examples","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"using HierarchicalGaussianFiltering #hide\nusing ActionModels #hide\nusing CSV #hide\nusing DataFrames #hide\nusing Plots #hide\nusing StatsPlots #hide\n\nhgf_path_continuous = dirname(dirname(pathof(HierarchicalGaussianFiltering))); #hide\nhgf_path_continuous = hgf_path_continuous * \"/docs/src/tutorials/data/\"; #hide\n\ninputs_continuous = Float64[]; #hide\nopen(hgf_path_continuous * \"classic_usdchf_inputs.dat\") do f #hide\n    for ln in eachline(f) #hide\n        push!(inputs_continuous, parse(Float64, ln)) #hide\n    end #hide\nend #hide\n\nhgf_path_binary = dirname(dirname(pathof(HierarchicalGaussianFiltering))); #hide\n\nhgf_path_binary = hgf_path_binary * \"/docs/src/tutorials/data/\"; #hide\n\ninputs_binary = CSV.read(hgf_path_binary * \"classic_binary_inputs.csv\", DataFrame)[!, 1]; #hide\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/#Continuous-2-level-HGF","page":"List Of Premade HGF's","title":"Continuous 2-level HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"The continuous 2-level HGF is structured with following nodes:","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: continuous\nstate nodes:\n1st level: continuous (value coupling to input node)\n2nd level: continous (volatility coupling to 1st level)","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"#Create HGF and Agent\ncontinuous_2_level = premade_hgf(\"continuous_2level\");\nagent_continuous_2_level =\n    premade_agent(\"hgf_gaussian_action\", continuous_2_level, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Evolve agent plot trajetories","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"give_inputs!(agent_continuous_2_level, inputs_continuous);\nplot_trajectory(\n    agent_continuous_2_level,\n    \"x2\",\n    color = \"blue\",\n    size = (1300, 500),\n    xlims = (0, 615),\n    xlabel = \"Trading days since 1 January 2010\",\n    title = \"Volatility parent trajectory\",\n)","category":"page"},{"location":"generated_markdowns/premade_HGF/#JGET-HGF","page":"List Of Premade HGF's","title":"JGET HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: continuous\nstate nodes:\n1st level: continuous (value coupling to input node)\n2nd level: continous (volatility coupling to 1st level)\n3rd level: continous (volatility coupling to input node)\n4th level: continous (volatility coupling to 3rd level)","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"#Create HGF and Agent\nJGET = premade_hgf(\"JGET\");\nagent_JGET = premade_agent(\"hgf_gaussian_action\", JGET, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Evolve agent plot trajetories","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"give_inputs!(agent_JGET, inputs_continuous);\nplot_trajectory(\n    agent_JGET,\n    \"x2\",\n    color = \"blue\",\n    size = (1300, 500),\n    xlims = (0, 615),\n    xlabel = \"Trading days since 1 January 2010\",\n    title = \"Volatility parent trajectory\",\n)","category":"page"},{"location":"generated_markdowns/premade_HGF/#Binary-2-level-HGF","page":"List Of Premade HGF's","title":"Binary 2-level HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: binary\nstate nodes:\n1st level: binary (value coupling to input node)\n2nd level: continous (volatility coupliong to 1st level)","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"hgf_binary_2_level = premade_hgf(\"binary_2level\", verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Create an agent","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"agent_binary_2_level =\n    premade_agent(\"hgf_unit_square_sigmoid_action\", hgf_binary_2_level, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Evolve agent plot trajetories","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"give_inputs!(agent_binary_2_level, inputs_binary);\nplot_trajectory(agent_binary_2_level, (\"u\", \"input_value\"))\nplot_trajectory!(agent_binary_2_level, (\"x1\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"plot_trajectory(agent_binary_2_level, (\"x2\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/premade_HGF/#Binary-3-level-HGF","page":"List Of Premade HGF's","title":"Binary 3-level HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: Binary\nstate nodes:\n1st level: binary (value coupling to input node)\n2nd level: continous (value coupling to 1st level)\n3rd level: continous (volatility coupling to 2nd level)","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"hgf_binary_3_level = premade_hgf(\"binary_3level\", verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Create an agent","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"agent_binary_3_level =\n    premade_agent(\"hgf_unit_square_sigmoid_action\", hgf_binary_3_level, verbose = false);\nnothing #hide","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"Evolve agent plot trajetories","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"give_inputs!(agent_binary_3_level, inputs_binary);\nplot_trajectory(agent_binary_3_level, (\"u\", \"input_value\"))\nplot_trajectory!(agent_binary_3_level, (\"x1\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"plot_trajectory(agent_binary_3_level, (\"x2\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"plot_trajectory(agent_binary_3_level, (\"x3\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/premade_HGF/#Categorical-3-level-HGF","page":"List Of Premade HGF's","title":"Categorical 3-level HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"The categorical 3-level HGF model takes an input from one of m categories and learns the probability of a category appearing.","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: categorical\nstate nodes:\n1st level: categorical (value coupling to input node)\n2nd level: m binary (all value couplings to 1st level)\n3rd level: continuous (shared volatility coupling to all m nodes in 2nd level)","category":"page"},{"location":"generated_markdowns/premade_HGF/#Categorical-3-level-state-transition-HGF","page":"List Of Premade HGF's","title":"Categorical 3-level state transition HGF","text":"","category":"section"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"The categorical 3-level HGF model learns state transition probabilities between a set of n categorical startes.","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"input node: categorical\nstate nodes:\n1st level: n categorical state nodes (value coupling to input node)\n2nd level: n binary state nodes pr. n categorical state nodes (value coupling from each categorical state node to n binary state nodes)\n3rd level: continous (volatility coupling to all nodes in 2nd level (n x n nodes))","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"","category":"page"},{"location":"generated_markdowns/premade_HGF/","page":"List Of Premade HGF's","title":"List Of Premade HGF's","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/the_HGF_nodes.jl\"","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Creating-an-HGF-and-HGF-agent","page":"The HGF Nodes","title":"Creating an HGF and HGF agent","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"In this section we will cover the types of nodes, their parameters and the rules for structuring your own HGF.","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Overview","page":"The HGF Nodes","title":"Overview","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"The Node Types In an HGF and their states\nBuilding principles ","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#The-Node-Types-In-an-HGF","page":"The HGF Nodes","title":"The Node Types In an HGF","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"We have six types of nodes in the HGF: binary (state node and input node), categorical (state node and input node), and continuous (state node and input node).","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"If a node's parameters are configured with a default value, they are stated below as well.","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"We provide an overview of the states in each of the nodes.","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Binary Nodes\nState Node: States and parameters\nInput Node: States and parameters\nCategorical Nodes\nState Node: States and parameters\nInput Node: States and parameters\nContinuous Nodes\nState Node: States and parameters\nInput Node: States and parameters","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Binary-Nodes","page":"The HGF Nodes","title":"Binary Nodes","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-binary-state-nodes","page":"The HGF Nodes","title":"The states of binary state nodes","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"posterior_mean\nposterior_precision\nvalue_prediction_error\nprediction_mean\nprediction_precision","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Value coupling","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-binary-input-nodes-and-parameters","page":"The HGF Nodes","title":"The states of binary input nodes and parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"input value\nvalue prediction error","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters-2","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Category means (default is [0,1])\nInput precision (default is  infinite input precision)","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Categorical-Nodes","page":"The HGF Nodes","title":"Categorical Nodes","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-Categorical-state-nodes-and-parameters","page":"The HGF Nodes","title":"The states of Categorical state nodes and parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"posterior\nvalue prediction error\nprediction","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters-3","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"no parameters in the categorical state node","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-Categorical-input-nodes-and-parameters","page":"The HGF Nodes","title":"The states of Categorical input nodes and parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"input value","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters-4","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"no parameters in the categorical state node","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Continuous-Nodes","page":"The HGF Nodes","title":"Continuous Nodes","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-Continuous-state-nodes-and-parameters","page":"The HGF Nodes","title":"The states of Continuous state nodes and parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/#States","page":"The HGF Nodes","title":"States","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"posterior mean\nposterior precision\nvalue prediction error\nvolatility prediction error\nprediction mean\nprediciton volatility\nprediction precision\nauxiliary prediction precision","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters-5","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"evolution rate (default is 0)\nvalue coupling\nvolatility coupling\ninitial mean (default is 0)\ninitital precision (default is 0)","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#The-states-of-Continuous-input-nodes-and-parameters","page":"The HGF Nodes","title":"The states of Continuous input nodes and parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"input value\nvalue prediction error\nvolatility prediction error\nprediction volatility\nprediction precision","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Parameters-6","page":"The HGF Nodes","title":"Parameters","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"evolution rate (default is 0)\nvalue coupling\nvolatility coupling","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Building-principles","page":"The HGF Nodes","title":"Building principles","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/#Binary-state-node-rules:","page":"The HGF Nodes","title":"Binary state node rules:","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Can only have exactly one value parent\nCan only have excatly one value child\nCan only have a contionus state node as value parent","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#continuous-state-node-rules:","page":"The HGF Nodes","title":"continuous state node rules:","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Can’t have binary input node as child\nCan’t have binary input node as volatility child\nContionus state node having a binary input node as volatility child\nCan’t have contionus input node as value child while also having volatility children\nCan’t have the same value parent as volatility parent\nCan’t have the same value child as volatility child","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/#Categorical-state-node-rules:","page":"The HGF Nodes","title":"Categorical state node rules:","text":"","category":"section"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"Can only have exactly one value child\nCan only have categorical input node as child\nCan only have binary state node as parents","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"","category":"page"},{"location":"generated_markdowns/the_HGF_nodes/","page":"The HGF Nodes","title":"The HGF Nodes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"theory/node/#Belief-updates-in-the-HGF:-Computations-of-nodes","page":"Belief updates in the HGF: Computations of nodes","title":"Belief updates in the HGF: Computations of nodes","text":"","category":"section"},{"location":"theory/node/","page":"Belief updates in the HGF: Computations of nodes","title":"Belief updates in the HGF: Computations of nodes","text":"In the approximate inversion of the generative model presented above, (Mathys, 2011) derived a set of simple, one-step update equations that represent changes in beliefs about the hidden states specified in the generative model. For each state, a belief is held (and updated for every new input) by the agent and described as a Gaussian distribution, fully characterized by its mean mu_i^(k) and its inverse variance, or precision, pi_i^(k) on a given trial k. We conceptualize each belief as a node in a network, where belief updates involve computations within nodes as well as message passing between nodes. The computations of any node within an experimental trial can be ordered in time as shown in the box:","category":"page"},{"location":"theory/node/","page":"Belief updates in the HGF: Computations of nodes","title":"Belief updates in the HGF: Computations of nodes","text":" Node *i* at trial *k*\n\n(compute mathrmprediction^(k)_i)  \nlarr receive mathrmPE^(k)_i-1 from mathrmnode_i-1  \n\nUPDATE step  \ncompute mathrmposterior^(k)_i    \n*given* mathrmPE^(k)_i-1 and mathrmprediction^(k)_i   \nrarr send mathrmposterior^(k)_i to mathrmnode_i-1 \n\nPE step  \ncompute mathrmPE^(k)_i   \n*given* mathrmprediction^(k)_i and mathrmposterior^(k)_i   \nrarr send mathrmPE^(k)_i to mathrmnode_i+1   \nlarr receive mathrmposterior^(k)_i+1 from mathrmnode_i+1   \n\nPREDICTION step  \ncompute mathrmprediction^(k+1)_i  \n*given* mathrmposterior^(k)_i and mathrmposterior^(k)_i+1  ","category":"page"},{"location":"theory/node/","page":"Belief updates in the HGF: Computations of nodes","title":"Belief updates in the HGF: Computations of nodes","text":"The exact computations in each step depend on the nature of the coupling (via VAPEs vs. VOPEs) with the parent and children nodes and will be outlined in the following two chapters.","category":"page"},{"location":"theory/node/","page":"Belief updates in the HGF: Computations of nodes","title":"Belief updates in the HGF: Computations of nodes","text":"Note that we have placed the PREDICTION step in the end of a trial. This is because usually, we think about the beginning of a trial as starting with receiving a new input, and of a prediction as being present before that input is received. However, in some variants of the HGF the prediction also depends on the time that has passed in between trials, which is something that can only be evaluated once the new input arrives - hence the additional computation of the (current) prediction in the beginning of the trial. Conceptually, it makes most sense to think of the prediction as happening continuously between trials. For implementational purposes, it is however most convenient to only compute the prediction once the new input (and with it its arrival time) enters. This ensures both that the posterior means of parent nodes have had enough time to be sent back to their children for preparation for the new input, and that the arrival time of the new input can be taken into account appropriately.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/building_an_HGF.jl\"","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Creating-an-HGF-Agent","page":"Building an HGF","title":"Creating an HGF Agent","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"In this section we will build a binary 2-level HGF from scratch using the init_hgf() funciton.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"When building an HGF we need to define the following:","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"Input Nodes\nState Nodes\nEdges","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"A binary two level HGF is fairly simple. It consists of a binary input node, a binary state node and a continuous state node.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"The continuous state node is a  value parent for the binary state node. The Binary input node has the binary state node as parent. Let's start with setting up the binary input node.","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Defining-Input-Nodes","page":"Building an HGF","title":"Defining Input Nodes","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We can recall from the HGF nodes, that a binary input node's parameters are category means and input precision. We will set category means to [0,1] and the input precision to Inf.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"input_nodes = Dict(\n    \"name\" => \"Input_node\",\n    \"type\" => \"binary\",\n    \"category_means\" => [0, 1],\n    \"input_precision\" => Inf,\n);\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Defining-State-Nodes","page":"Building an HGF","title":"Defining State Nodes","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We are defining two state nodes. Let's start with the binary state node. The only parameter in this node is value coupling which is set when defining edges.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"The continuous state node have evolution rate, initial mean and initial precision parameters which we specify as well.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"state_nodes = [\n    # Configuring the first binary state node\n    Dict(\"name\" => \"binary_state_node\", \"type\" => \"binary\"),\n    # Configuring the continuous state node\n    Dict(\n        \"name\" => \"continuous_state_node\",\n        \"type\" => \"continuous\",\n        \"evolution_rate\" => -2,\n        \"initial_mean\" => 0,\n        \"initial_precision\" => 1,\n    ),\n];\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Defining-Edges","page":"Building an HGF","title":"Defining Edges","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"When defining the edges we start by sepcifying which node the perspective is from. So, when we specify the edges we start by specifying what the child in the relation is.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"At the buttom of our hierarchy we have the binary input node. The Input node has binary state node as parent.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"edges = [\n    Dict(\"child\" => \"Input_node\", \"value_parents\" => \"binary_state_node\"),\n\n    # The next relation is from the point of view of the binary state node. We specify out continous state node as parent with the value coupling as 1.\n    Dict(\"child\" => \"binary_state_node\", \"value_parents\" => (\"continuous_state_node\", 1)),\n];\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We are ready to initialize our HGF now.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"using HierarchicalGaussianFiltering\nusing ActionModels\n\nBinary_2_level_hgf = init_hgf(\n    input_nodes = input_nodes,\n    state_nodes = state_nodes,\n    edges = edges,\n    verbose = false,\n);\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We can access the states in our HGF:","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"get_states(Binary_2_level_hgf)","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We can access the parameters in our HGF","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"get_parameters(Binary_2_level_hgf)","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Creating-an-Agent-and-Action-model","page":"Building an HGF","title":"Creating an Agent and Action model","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"Agents and aciton models are two sides of the same coin. The Hierarchical Gaussian Filtering package uses the Actionmodels.jl package for configuration of models, agents and fitting processes. An agent means nothing without an action model and vise versa. You can see more on action models in the documentation for ActionModel.jl The agent will have our Binary 2-level HGF as a substruct.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"In this example we would like to create an agent whose actions are distributed according to a Bernoulli distribution with action probability is the softmax of one of the nodes in the HGF.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We initialize the action model and create it. In a softmax action model we need a parameter from the agent called softmax action precision which is used in the update step of the action model.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"using Distributions\nfunction binary_softmax_action(agent, input)\n\n    ##------- Staty by getting all information ---------\n\n\n    ##Get HGF from the agents' substruct\n    hgf = agent.substruct\n\n    ##Take out the target state from the agents' settings. The target state will be specified in the agent\n    target_state = agent.settings[\"target_state\"]\n\n    ##Take out the parameter from our agent\n    action_precision = agent.parameters[\"softmax_action_precision\"]\n\n    ##Get the specified state out of the hgf\n    target_value = get_states(hgf, target_state)\n\n    ##--------------- Update step starts  -----------------\n\n    ##Use sotmax to get the action probability\n    action_probability = 1 / (1 + exp(-action_precision * target_value))\n\n    ##---------------- Update step end  ------------------\n    ##If the action probability is not between 0 and 1\n    #if !(0 <= action_probability <= 1)\n    ##Throw an error that will reject samples when fitted\n    ##throw(\n    ##RejectParameters(\n    # \"With these parameters and inputs, the action probability became $action_probability, which should be between 0 and 1. Try other parameter settings\",\n    ##),\n    ##)\n    ##end\n\n    ##---------------- Get action distribution  ------------------\n\n    ##Create Bernoulli normal distribution with mean of the target value and a standard deviation from parameters\n    distribution = Distributions.Bernoulli(action_probability)\n\n    ##Return the action distribution\n    return distribution\nend","category":"page"},{"location":"generated_markdowns/building_an_HGF/#Creating-an-agent-using-our-action-model-and-having-our-HGF-as-substruct","page":"Building an HGF","title":"Creating an agent using our action model and having our HGF as substruct","text":"","category":"section"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"We will create an agent with the init_agent() function. We need to specify an action model, substruct, parameters, states and settings.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"Let's define our action model","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"action_model = binary_softmax_action;\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"The parameter of the agent is just softmax action precision. We set this value to 1","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"parameters = Dict(\"softmax_action_precision\" => 1);\nnothing #hide","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"The states of the agent are empty, but the states from the HGF will be accessible.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"states = Dict()","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"In the settings we specify what our target state is. We want it to be the prediction mean of our binary state node.","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"settings = Dict(\n    \"hgf_actions\" => \"softmax_action\",\n    \"target_state\" => (\"binary_state_node\", \"prediction_mean\"),\n);\n\n# Let's initialize our agent\nagent = init_agent(\n    action_model,\n    substruct = Binary_2_level_hgf,\n    parameters = parameters,\n    states = states,\n    settings = settings,\n)\n\n# Define inputs\nInputs = [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0];\n\n# Give Inputs and save actions\nactions = give_inputs!(agent.substruct, Inputs)","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"plot the input and the prediction state from our binary state node","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"using Plots\nusing StatsPlots\n\nplot_trajectory(agent, (\"Input_node\", \"input_value\"))\n\nplot_trajectory!(agent, (\"binary_state_node\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"","category":"page"},{"location":"generated_markdowns/building_an_HGF/","page":"Building an HGF","title":"Building an HGF","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/premade_models.jl\"","category":"page"},{"location":"generated_markdowns/premade_models/#Premade-models","page":"List Of Premade Agent Models","title":"Premade models","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"The Hierarchical Gaussian Filtering package contains a set of premade HGF's and HGF-agents for you to use. We will provide an overview of how to work with the premade agent models, and lastly a total overview of the premade HGF models to use in the package.","category":"page"},{"location":"generated_markdowns/premade_models/#Premade-HGF-agents","page":"List Of Premade Agent Models","title":"Premade HGF-agents","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"HGF Gaussian Action Noise\nHGF Binary Softmax\nHGF unit square sigmoid\nHGF-Predict-Category","category":"page"},{"location":"generated_markdowns/premade_models/#HGF-with-Gaussian-Action-Noise-agent","page":"List Of Premade Agent Models","title":"HGF with Gaussian Action Noise agent","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"This premade agent model can be found as \"hgfgaussianaction\" in the package. The Action distribution is a gaussian distribution with mean of the target state from the chosen HGF, and the standard deviation consisting of the action precision parameter inversed.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Default hgf: contionus_2level\nDefault Target state: (x1, posterior mean)\nDefault Parameters: gaussian action precision = 1","category":"page"},{"location":"generated_markdowns/premade_models/#HGF-Binary-Softmax-agent","page":"List Of Premade Agent Models","title":"HGF Binary Softmax agent","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"The action distribution is a Bernoulli distribution, and the parameter is action probability. Action probability is calculated using a softmax on the action precision parameter and the target value from the HGF.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Default hgf: binary_3level\nDefault target state; (x1, prediction mean)\nDefault parameters: softmax action precision = 1","category":"page"},{"location":"generated_markdowns/premade_models/#HGF-unit-square-sigmoid-agent","page":"List Of Premade Agent Models","title":"HGF unit square sigmoid agent","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"The action distribution is Bernoulli distribution with the parameter beinga a softmax of the target value and action precision.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Default hgf: binary_3level\nDefault target state; (x1, prediction mean)\nDefault parameters: softmax action precision = 1","category":"page"},{"location":"generated_markdowns/premade_models/#HGF-Predict-Category-agent","page":"List Of Premade Agent Models","title":"HGF Predict Category agent","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"The action distribution is a categorical distribution. The action model takes the target node from the HGF, and takes out the prediction state. This state is a vector of values for each category. The vector is the only thing used in the categorical distribution","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Default hgf: categorical_3level\nDefault target state: Target categorical node x1\nDefault parameters: none","category":"page"},{"location":"generated_markdowns/premade_models/#Using-premade-agents","page":"List Of Premade Agent Models","title":"Using premade agents","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"We will demonstrate how to work with a premade agent with basic functions from the ActionModels.jl package.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Getting a list of premade HGF agents","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"using HierarchicalGaussianFiltering\n\npremade_agent(\"help\")","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Define an agent with default parameter values and default HGF","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"agent = premade_agent(\"hgf_binary_softmax_action\")","category":"page"},{"location":"generated_markdowns/premade_models/#Utility-functions-for-accessing-parameters-and-states","page":"List Of Premade Agent Models","title":"Utility functions for accessing parameters and states","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Get all parameters in an agent:","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"get_parameters(agent)","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Get specific parameter in agent:","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"get_parameters(agent, (\"x3\", \"initial_precision\"))","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Get all states in an agent:","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"get_states(agent)","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Get specific state in an agent:","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"get_states(agent, (\"x1\", \"posterior_precision\"))","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Set a parameter value","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"set_parameters!(agent, (\"x3\", \"initial_precision\"), 0.4)","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Set multiple parameter values","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"set_parameters!(\n    agent,\n    Dict((\"x3\", \"initial_precision\") => 1, (\"x3\", \"evolution_rate\") => 0),\n)","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Let us move on to giving a set of inputs to the agent.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Define inputs","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"input = [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0]","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Give inputs and generate actions","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"actions = give_inputs!(agent, input)","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Get the history of a single state in the agent","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"get_history(agent, (\"x1\", \"prediction_mean\"))","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"We can plot the input and prediciton means with plot trajectory. Notice, when using plot_trajectory!() you can layer plots.","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"using StatsPlots\nusing Plots\n\nplot_trajectory(agent, (\"u\", \"input_value\"))","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Let's add prediction mean on top of the plot","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"plot_trajectory!(agent, (\"x1\", \"prediction_mean\"))","category":"page"},{"location":"generated_markdowns/premade_models/#Overview-of-functions","page":"List Of Premade Agent Models","title":"Overview of functions","text":"","category":"section"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"Modules = [HierarchicalGaussianFiltering]\nPages = [\"premade_models/premade_action_models.jl\",\"premade_models/premade_agents.jl\",\"premade_models/premade_hgfs.jl\"]","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"","category":"page"},{"location":"generated_markdowns/premade_models/","page":"List Of Premade Agent Models","title":"List Of Premade Agent Models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/utility_functions.jl\"","category":"page"},{"location":"generated_markdowns/utility_functions/#Variations-of-utility-functions-in-the-Hierarchical-Gaussian-Filtering-package","page":"Utility Functions","title":"Variations of utility functions in the Hierarchical Gaussian Filtering package","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"A lot of commonly used utility functions are collected here in an overview with examples. The following utility functions can be used:","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Getting Parameters\nGetting States\nSetting Parameters\nGiving Inputs\nGetting History\nPlotting State Trajectories\nGetting Predictions\nGetting Surprise\nResetting an HGF-agent","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"we start by defining an agent to use","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"using HierarchicalGaussianFiltering","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"See which agent to choose","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"premade_agent(\"help\")","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"set agent","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"agent = premade_agent(\"hgf_binary_softmax_action\")","category":"page"},{"location":"generated_markdowns/utility_functions/#Getting-Parameters","page":"Utility Functions","title":"Getting Parameters","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#Let us start by defining a premade agent:\n\n#getting all parameters\nget_parameters(agent)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"getting couplings ERROR WITH THIS getparameters(agent, (\"x2\", \"x3\", \"volatilitycoupling\"))","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"getting multiple parameters specify them in a vector","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get_parameters(agent, [(\"x3\", \"evolution_rate\"), (\"x3\", \"initial_precision\")])","category":"page"},{"location":"generated_markdowns/utility_functions/#Getting-States","page":"Utility Functions","title":"Getting States","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#getting all states from an agent model\nget_states(agent)\n\n#getting a single state\nget_states(agent, (\"x2\", \"posterior_precision\"))\n\n#getting multiple states\nget_states(agent, [(\"x2\", \"posterior_precision\"), (\"x2\", \"auxiliary_prediction_precision\")])","category":"page"},{"location":"generated_markdowns/utility_functions/#Setting-Parameters","page":"Utility Functions","title":"Setting Parameters","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"you can set parameters before you initialize your agent, you can set them after and change them when you wish to. Let's try an initialize a new agent with parameters. We start by choosing the premade unit square sigmoid action agent whose parameter is sigmoid action precision.","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"agent_parameter = Dict(\"sigmoid_action_precision\" => 3)\n\n#We also specify our HGF and custom parameter settings:\n\nhgf_parameters = Dict(\n    (\"u\", \"category_means\") => Real[0.0, 1.0],\n    (\"u\", \"input_precision\") => Inf,\n    (\"x2\", \"evolution_rate\") => -2.5,\n    (\"x2\", \"initial_mean\") => 0,\n    (\"x2\", \"initial_precision\") => 1,\n    (\"x3\", \"evolution_rate\") => -6.0,\n    (\"x3\", \"initial_mean\") => 1,\n    (\"x3\", \"initial_precision\") => 1,\n    (\"x1\", \"x2\", \"value_coupling\") => 1.0,\n    (\"x2\", \"x3\", \"volatility_coupling\") => 1.0,\n)\n\nhgf = premade_hgf(\"binary_3level\", hgf_parameters)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Define our agent with the HGF and agent parameter settings","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"agent = premade_agent(\"hgf_unit_square_sigmoid_action\", hgf, agent_parameter)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Changing a single parameter","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"set_parameters!(agent, (\"x3\", \"initial_precision\"), 4)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Changing multiple parameters","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"set_parameters!(\n    agent,\n    Dict((\"x3\", \"initial_precision\") => 5, (\"x1\", \"x2\", \"value_coupling\") => 2.0),\n)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"###Giving Inputs","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#give single input\ngive_inputs!(agent, 0)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#reset the agent\nreset!(agent)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Giving multiple inputs","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"inputs = [\n    1,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n]\ngive_inputs!(agent, inputs)","category":"page"},{"location":"generated_markdowns/utility_functions/#Getting-History","page":"Utility Functions","title":"Getting History","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#getting the action state from the agent\nget_history(agent)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"getting history of single state","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get_history(agent, (\"x3\", \"posterior_precision\"))","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"getting history of multiple states:","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get_history(agent, [(\"x1\", \"prediction_mean\"), (\"x3\", \"posterior_precision\")])","category":"page"},{"location":"generated_markdowns/utility_functions/#Plotting-State-Trajectories","page":"Utility Functions","title":"Plotting State Trajectories","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"using StatsPlots\nusing Plots\n# Plotting single state:\nplot_trajectory(agent, (\"u\", \"input_value\"))\n\n#Adding state trajectory on top\nplot_trajectory!(agent, (\"x1\", \"prediction\"))","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Plotting more individual states:","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"# Plot posterior of x2\nplot_trajectory(agent, (\"x2\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"# Plot posterior of x3\nplot_trajectory(agent, (\"x3\", \"posterior\"))","category":"page"},{"location":"generated_markdowns/utility_functions/#Getting-Predictions","page":"Utility Functions","title":"Getting Predictions","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"You can specify an HGF or an agent in the funciton. The default node to extract is the node \"x1\" which is the first level node in every premade HGF structure.","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get prediction of the last state","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get_prediction(agent)\n\n#specify another node to get predictions from:\nget_prediction(agent, \"x2\")","category":"page"},{"location":"generated_markdowns/utility_functions/#Getting-Purprise","page":"Utility Functions","title":"Getting Purprise","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"#getting surprise of input node\nget_surprise(agent, \"u\")","category":"page"},{"location":"generated_markdowns/utility_functions/#Resetting-an-HGF-agent","page":"Utility Functions","title":"Resetting an HGF-agent","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"resetting the agent with reset()","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"reset!(agent)","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"see that action state is cleared","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"get_history(agent)","category":"page"},{"location":"generated_markdowns/utility_functions/#Overview-of-all-ultility-functions","page":"Utility Functions","title":"Overview of all ultility functions","text":"","category":"section"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Modules = [HierarchicalGaussianFiltering]\nPages = [\"ActionModels_variations/utils/get_history.jl\",\"ActionModels_variations/utils/get_parameters.jl\",\"ActionModels_variations/utils/get_states.jl\",\"ActionModels_variations/utils/give_inputs.jl\",\"ActionModels_variations/utils/reset.jl\",\"ActionModels_variations/utils/set_parameters.jl\",utils/get_prediction.jl\", \"utils/get_surprise.jl\",\"utils/pretty_printing.jl\"]","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"","category":"page"},{"location":"generated_markdowns/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"EditURL = \"https://github.com/ilabcode/HierarchicalGaussianFiltering.jl/blob/main/docs/src/Julia_src_files/index.jl\"","category":"page"},{"location":"#Welcome-to-The-Hierarchical-Gaussian-Filtering-Package!","page":"Introduction to Hierarchical Gaussian Filtering","title":"Welcome to The Hierarchical Gaussian Filtering Package!","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"Hierarchical Gaussian Filtering (HGF) is a novel and adaptive package for doing cognitive and behavioral modelling. With the HGF you can fit time series data fit participant-level individual parameters, measure group differences based on model-specific parameters or use the model for any time series with underlying change in uncertainty.","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"The HGF consists of a network of probabilistic nodes hierarchically structured. The hierarchy is determined by the coupling between nodes. A node (child node) in the network can inheret either its value or volatility sufficient statistics from a node higher in the hierarchy (a parent node).","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"The presentation of a new observation at the lower level of the hierarchy (i.e. the input node) trigger a recursuve update of the nodes belief throught the bottom-up propagation of precision-weigthed prediction error.","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"The HGF will be explained in more detail in the theory section of the documentation","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"It is also recommended to check out the ActionModels.jl pacakge for stronger intuition behind the use of agents and action models.","category":"page"},{"location":"#Getting-started","page":"Introduction to Hierarchical Gaussian Filtering","title":"Getting started","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"The last official release can be downloaded from Julia with \"] add HierarchicalGaussianFiltering\"","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"We provide a script for getting started with commonly used functions and use cases","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"Load packages","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"using HierarchicalGaussianFiltering\nusing ActionModels","category":"page"},{"location":"#Get-premade-agent","page":"Introduction to Hierarchical Gaussian Filtering","title":"Get premade agent","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"premade_agent(\"help\")","category":"page"},{"location":"#Create-agent","page":"Introduction to Hierarchical Gaussian Filtering","title":"Create agent","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"agent = premade_agent(\"hgf_binary_softmax_action\")","category":"page"},{"location":"#Get-states-and-parameters","page":"Introduction to Hierarchical Gaussian Filtering","title":"Get states and parameters","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"get_states(agent)","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"get_parameters(agent)","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"Set a new parameter for initial precision of x2 and define some inputs","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"set_parameters!(agent, (\"x2\", \"initial_precision\"), 0.9)\ninputs = [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0];\nnothing #hide","category":"page"},{"location":"#Give-inputs-to-the-agent","page":"Introduction to Hierarchical Gaussian Filtering","title":"Give inputs to the agent","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"actions = give_inputs!(agent, inputs)","category":"page"},{"location":"#Plot-state-trajectories-of-input-and-prediction","page":"Introduction to Hierarchical Gaussian Filtering","title":"Plot state trajectories of input and prediction","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"using StatsPlots\nusing Plots\nplot_trajectory(agent, (\"u\", \"input_value\"))\nplot_trajectory!(agent, (\"x1\", \"prediction\"))","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"Plot state trajectory of input value, action and prediction of x1","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"plot_trajectory(agent, (\"u\", \"input_value\"))\nplot_trajectory!(agent, \"action\")\nplot_trajectory!(agent, (\"x1\", \"prediction\"))","category":"page"},{"location":"#Fitting-parameters","page":"Introduction to Hierarchical Gaussian Filtering","title":"Fitting parameters","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"using Distributions\nprior = Dict((\"x2\", \"evolution_rate\") => Normal(1, 0.5))\n\nmodel = fit_model(agent, prior, inputs, actions, n_iterations = 20)","category":"page"},{"location":"#Plot-chains","page":"Introduction to Hierarchical Gaussian Filtering","title":"Plot chains","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"plot(model)","category":"page"},{"location":"#Plot-prior-angainst-posterior","page":"Introduction to Hierarchical Gaussian Filtering","title":"Plot prior angainst posterior","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"plot_parameter_distribution(model, prior)","category":"page"},{"location":"#Get-posterior","page":"Introduction to Hierarchical Gaussian Filtering","title":"Get posterior","text":"","category":"section"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"get_posteriors(model)","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"","category":"page"},{"location":"","page":"Introduction to Hierarchical Gaussian Filtering","title":"Introduction to Hierarchical Gaussian Filtering","text":"This page was generated using Literate.jl.","category":"page"}]
}
